// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import master "github.com/kmacmcfarlane/go-scheduler/gen/protobuf/master"
import mock "github.com/stretchr/testify/mock"

// MasterClient is an autogenerated mock type for the MasterClient type
type MasterClient struct {
	mock.Mock
}

// Log provides a mock function with given fields: ctx, in, opts
func (_m *MasterClient) Log(ctx context.Context, in *master.LogRequest, opts ...grpc.CallOption) (master.Master_LogClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 master.Master_LogClient
	if rf, ok := ret.Get(0).(func(context.Context, *master.LogRequest, ...grpc.CallOption) master.Master_LogClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(master.Master_LogClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.LogRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, in, opts
func (_m *MasterClient) Query(ctx context.Context, in *master.QueryRequest, opts ...grpc.CallOption) (*master.QueryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *master.QueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *master.QueryRequest, ...grpc.CallOption) *master.QueryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.QueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.QueryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: ctx, in, opts
func (_m *MasterClient) Start(ctx context.Context, in *master.StartRequest, opts ...grpc.CallOption) (*master.StartResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *master.StartResponse
	if rf, ok := ret.Get(0).(func(context.Context, *master.StartRequest, ...grpc.CallOption) *master.StartResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.StartResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.StartRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: ctx, in, opts
func (_m *MasterClient) Stop(ctx context.Context, in *master.StopRequest, opts ...grpc.CallOption) (*master.StopResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *master.StopResponse
	if rf, ok := ret.Get(0).(func(context.Context, *master.StopRequest, ...grpc.CallOption) *master.StopResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.StopResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.StopRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
