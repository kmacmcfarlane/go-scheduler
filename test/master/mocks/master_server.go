// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import master "github.com/kmacmcfarlane/go-scheduler/gen/protobuf/master"
import mock "github.com/stretchr/testify/mock"

// MasterServer is an autogenerated mock type for the MasterServer type
type MasterServer struct {
	mock.Mock
}

// Log provides a mock function with given fields: _a0, _a1
func (_m *MasterServer) Log(_a0 *master.LogRequest, _a1 master.Master_LogServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*master.LogRequest, master.Master_LogServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *MasterServer) Query(_a0 context.Context, _a1 *master.QueryRequest) (*master.QueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *master.QueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *master.QueryRequest) *master.QueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.QueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.QueryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *MasterServer) Start(_a0 context.Context, _a1 *master.StartRequest) (*master.StartResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *master.StartResponse
	if rf, ok := ret.Get(0).(func(context.Context, *master.StartRequest) *master.StartResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.StartResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.StartRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *MasterServer) Stop(_a0 context.Context, _a1 *master.StopRequest) (*master.StopResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *master.StopResponse
	if rf, ok := ret.Get(0).(func(context.Context, *master.StopRequest) *master.StopResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.StopResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *master.StopRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
