// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import status "github.com/kmacmcfarlane/go-scheduler/pkg/model/status"

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// Log provides a mock function with given fields: name, host
func (_m *ClientService) Log(name string, host string) (io.Reader, error) {
	ret := _m.Called(name, host)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string, string) io.Reader); ok {
		r0 = rf(name, host)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: name, host
func (_m *ClientService) Query(name string, host string) (status.Status, error) {
	ret := _m.Called(name, host)

	var r0 status.Status
	if rf, ok := ret.Get(0).(func(string, string) status.Status); ok {
		r0 = rf(name, host)
	} else {
		r0 = ret.Get(0).(status.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: dockerImage, name, host
func (_m *ClientService) Start(dockerImage string, name string, host string) error {
	ret := _m.Called(dockerImage, name, host)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(dockerImage, name, host)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: name, host
func (_m *ClientService) Stop(name string, host string) error {
	ret := _m.Called(name, host)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, host)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
